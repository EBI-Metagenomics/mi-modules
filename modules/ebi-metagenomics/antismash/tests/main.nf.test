
nextflow_process {

    name "Test Process ANTISMASH"
    script "../main.nf"
    process "ANTISMASH"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "antismash"

    test("antismash") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file("${moduleDir}/tests/test.fasta", checkIfExists: true)
                    ]
                input[1] = [
                    [ id:'test', single_end:false ], // meta map
                    file("${moduleDir}/tests/test.gff", checkIfExists: true)
                    ]
                input[2] = [
                    file("${moduleDir}/tests/antismash_trimmed.tar.gz", checkIfExists: true),
                    "7.0.1"
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(path(process.out.gbk.get(0).get(1)).readLines()[0].contains("31398 bp")).match("gbk") },
                { assert snapshot(path(process.out.gbk.get(0).get(1)).readLines()[0].contains("NODE_1_length_31398_cov_44.290974")).match("json") }
            )
        }

    }

    test("antismash - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file("${moduleDir}/tests/test.fasta", checkIfExists: true)
                    ]
                input[1] = [
                    [ id:'test', single_end:false ], // meta map
                    file("${moduleDir}/tests/test.gff", checkIfExists: true)
                    ]
                input[2] = [
                    file("${moduleDir}/tests/antismash_trimmed.tar.gz", checkIfExists: true),
                    "7.0.1"
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.gbk).match("stub_gbk") }
            )
        }

    }

}
