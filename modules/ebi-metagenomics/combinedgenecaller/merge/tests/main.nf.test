nextflow_process {

    name "Test Process COMBINEDGENECALLER_MERGE"
    script "../main.nf"
    process "COMBINEDGENECALLER_MERGE"

    tag "modules"
    tag "modules_nfcore"
    tag "modules_ebimetagenomics"
    tag "combinedgenecaller"
    tag "combinedgenecaller/merge"

    test("combinedgenecaller merge without a maskfile") {

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ],
                    file('${moduleDir}/tests/fixtures/input_prodigal.sco.gz', checkIfExists: true),
                    file('${moduleDir}/tests/fixtures/input_prodigal.ffn.gz', checkIfExists: true),
                    file('${moduleDir}/tests/fixtures/input_prodigal.faa.gz', checkIfExists: true),
                    file('${moduleDir}/tests/fixtures/input_fgs.out.gz', checkIfExists: true),
                    file('${moduleDir}/tests/fixtures/input_fgs.ffn.gz', checkIfExists: true),
                    file('${moduleDir}/tests/fixtures/input_fgs.faa.gz', checkIfExists: true),
                    []
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("combinedgenecaller merge with a maskfile") {

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file('${moduleDir}/tests/fixtures/input_prodigal.sco.gz', checkIfExists: true),
                    file('${moduleDir}/tests/fixtures/input_prodigal.ffn.gz', checkIfExists: true),
                    file('${moduleDir}/tests/fixtures/input_prodigal.faa.gz', checkIfExists: true),
                    file('${moduleDir}/tests/fixtures/input_fgs.out.gz', checkIfExists: true),
                    file('${moduleDir}/tests/fixtures/input_fgs.ffn.gz', checkIfExists: true),
                    file('${moduleDir}/tests/fixtures/input_fgs.faa.gz', checkIfExists: true),
                    file('${moduleDir}/tests/fixtures/cmsearch.all.tblout.deoverlapped.gz', checkIfExists: true),
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
