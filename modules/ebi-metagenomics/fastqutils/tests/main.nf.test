
nextflow_process {

    name "Test Process FASTQUTILS"
    script "../main.nf"
    process "FASTQUTILS"

    tag "modules"
    tag "modules_nfcore"
    tag "fastqutils"

    test("fastqutils - noerrors_pe") {
        when {
            process {
                """                
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [ file("${moduleDir}/tests/fixtures/ERR4674038_trim_1.fastq", checkIfExists: true),
                     file("${moduleDir}/tests/fixtures/ERR4674038_trim_2.fastq", checkIfExists: true)
                    ]
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("fastqutils - brokenfileerror") {
        when {
            process {
                """                
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [ file("${moduleDir}/tests/fixtures/ERR4674038_test_brokenfile_1.fastq", checkIfExists: true),
                     file("${moduleDir}/tests/fixtures/ERR4674038_test_brokenfile_2.fastq", checkIfExists: true)
                    ]
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("fastqutils - headermatcherror") {
        when {
            process {
                """                
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [ file("${moduleDir}/tests/fixtures/ERR4674038_test_headermatch_1.fastq", checkIfExists: true),
                     file("${moduleDir}/tests/fixtures/ERR4674038_test_headermatch_2.fastq", checkIfExists: true)
                    ]
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("fastqutils - headeruniqueerror") {
        when {
            process {
                """                
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [ file("${moduleDir}/tests/fixtures/ERR4674038_test_headerunique_1.fastq", checkIfExists: true),
                     file("${moduleDir}/tests/fixtures/ERR4674038_test_headerunique_2.fastq", checkIfExists: true)
                    ]
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("fastqutils - readcounterror") {
        when {
            process {
                """                
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [ file("${moduleDir}/tests/fixtures/ERR4674038_test_readcount_1.fastq", checkIfExists: true),
                     file("${moduleDir}/tests/fixtures/ERR4674038_test_readcount_2.fastq", checkIfExists: true)
                    ]
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("fastqutils - stub") {

        options "-stub"

        when {
            process {
                """                
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [ file("${moduleDir}/tests/fixtures/ERR4674038_trim_1.fastq", checkIfExists: true),
                     file("${moduleDir}/tests/fixtures/ERR4674038_trim_2.fastq", checkIfExists: true)
                    ]
                    ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
